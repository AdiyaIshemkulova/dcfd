python3-admin startproject config . 


[In reply to Porkdididid]
django-admin startproject config .


python3 manage.py makemigrations - создаются миграции
migrate -> 0001__init__.py
python3 manage.py migrate - применяете миграции


python3 manage.py runserver - запуск бекенда

python3 manage.py createsuperuser - создание суперюзера (админа)

'------------------------------------------------------------------'\
Model - класс, который характеризует структуру вашей таблицы в бд, где аттрибутами - поля таблицы (наследуется от класса 'dlango.db models.Model')

Manager - класс, который предоставляет доступ через методы к 'ORM DJANGO' (которая в свою очередб отправляет запросы в бд)

по умолчанию 'manager' добавляется в аттрибут 'object' в модель

'Поля'

CharField - для строковых значений
(обязательно нужно указывать 'max_length')
SlugField - для хранения sluf (короткая метка для чего-либо, содержащая только буквы,цифры,подчеркивания или дефисы. Они обычно используются в URL. Работает точно так же как CharField, но есть проверка на недопустимые символы)
TextField - для хранения текста
DecimalField - для дробных чисел (принимает два обязательных аргумента: max_digits) (кол-во цифр целой части),'decimal_places'(кол-во цифр после5 дробной части)
IntegerField - для чисел
BoolenField  - для bool значений
DateField - для дат (питоновская версия - datetime.date) (можно указатоь 'auto_now'-обновляет каждый раз когда запись обновляется, 'auto_now_add'- задается только при создании объекта)
TimeField - для хранения только времени (также можно использовать 'auto_now', 'auto_now_add')
DateTimeField - дата и время
DurationalField - для хранения периода времени
EmailField - для email (имеет встроенную проверку)
FileField - для загрузки файлов ('upload_to' - для указания директории, где будут хранится файлы, в базе данных будет хранится лишь путь до этих файлов)
ImageField - для загрузки фотографий (тоже самое, что и FileField, но требует установки 'Pillow')
JsonField - для хранения строк в формате Json

Параметры для полей
null - если True, будет ставить в бд объект 'null'
blank - если True, будет ставить 'пустую строку', если данные не переданы
choices - позволяет ограничить возможные варианты записей в этом поле, нужно передать список с кортежами, где первый элемент то, что будет в бд, а второе то что будет отображаться
default - добавляет значение по умолчанию, если данные не переданы
editable - если False, nо запись нельзя поменять
primary_key - если True, то это поле будет первичным ключем (идентификатором) в этой таблице (по дефолту django создает 'id')
unique - если True, то будет вызываться ошибка при попытке создать запись, которая уже есть в таблице
validators - список для проверки Поля

Связи
ForeignKey - связь один ко многим (обязательно указать 'модель' на которую будет ссылаться, 'on_delete','related_name')
ManyToMany - связь многие ко многим (все тоже самое, что и ForeignKey)
OneToOne - связь один к одному (все тоже самое,что и в ForeignKey)
 
on_delete
models.CASCADE - каскадное удаление (если удаляется главный объект - удаляются и все зависящие от него объекты) Например блогер удалил аккаунт в инстаграмме, то его публикации тоже удаляется

models.PROTECT - вызывает ошибку при попыткек удаления главного объекта

models.RESTRICT - в отличие от PROTECT, удаление главного объекта допускается, если он также ссылается на другой объект, который удаляется в той же операции, но через отношение CASCADE

models.SET_NULL - не удаляет зависящие объекты, а ставит 'null' (только если null = True)

models.SET_DEFAULT - ставит 'неизвестно' (только если был определен default)

models.DO_NOTHING - вообще ничего не делает, так что будет ошибка

'VIEWS'
view - это функция, которая принимает запрос и возвращает ответ

в drf(django rest framework) если мы пишем view на функциях, то нужно их декорировать 'api_view', в которой мы передаем список с методами, которые обрабатывает эта функция

если в url есть динамический элемент, то функция так же принимает вторым аргументом его (например id)

veiw должна возвращать Response или любой класс из django.http

APIView - класс, который позволяет вам на классах писать veiw

тот метод, который вы переопределите в этом классе, тот и будет обрабатывать ваша veiw (get,post,put,patch,delete)

VIEWSET - класс, который позволяет обрабатывать сразу все запросы в одном классе (но его нужно подключат в urls через router)

vieset включает в себя сразу все методы (create, retrieve, update, partial_update, destroy, list), которые по желанию можно переопределить

ModelViewSet - более удобная версия VIEWSET

достаточно переопределить аттрибуты
queryset - обЪекты, которые будут использоваться
serializer_class - серелизатор, который будет использоваться

дополнительно можно переопределить
permission_classes - список с permission_classes
filter_backends - список с классами для фильтрации 